{"version":3,"sources":["services/persons.js","components/PersonForm.js","components/Filter.js","components/Persons.js","components/Notification.js","App.js","index.js"],"names":["baseUrl","axios","get","then","response","data","newObject","post","id","delete","updatedObject","put","PersonForm","persons","setPersons","setNotification","setNotificationStyle","useState","newName","setNewName","newNumber","setnewNumber","addPerson","event","preventDefault","person","name","number","map","includes","window","confirm","filter","p","personService","updatedPerson","catch","error","returnedPerson","concat","console","log","setTimeout","onSubmit","value","onChange","target","type","Filter","newFilter","handleFilterChange","Persons","removePerson","filteredPersons","onClick","Notification","message","style","className","App","notificationMessage","setNotificationMessage","notificationStyle","setFilter","toLowerCase","useEffect","initialPersons","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.26f1cc8b.chunk.js","sourcesContent":["import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst remove = (id) => {\r\n    axios.delete(`${baseUrl}/${id}`)\r\n} \r\n\r\nconst update = updatedObject => {\r\n    const request = axios.put(`${baseUrl}/${updatedObject.id}`, updatedObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, remove, update }","import React, { useState } from 'react'\r\nimport personService from '../services/persons'\r\n\r\nconst PersonForm = ({ persons, setPersons, setNotification, setNotificationStyle }) => {\r\n    const [ newName, setNewName ] = useState('')\r\n    const [ newNumber, setnewNumber] = useState('')\r\n    const handleNameChange = (event) => setNewName(event.target.value)\r\n    const handleNumberChange = (event) => setnewNumber(event.target.value)\r\n\r\n    const addPerson = (event) => {\r\n        event.preventDefault()\r\n        const person = {\r\n          name: newName,\r\n          number: newNumber,\r\n        }\r\n        if (!(persons.map((person) => person.name)).includes(newName)) {\r\n          personService\r\n            .create(person)\r\n            .then(returnedPerson => {\r\n              setPersons(persons.concat(returnedPerson))\r\n              setNotificationStyle('success')\r\n              setNotification(`Added ${newName}`)\r\n          })\r\n          .catch(error => {\r\n            console.log(error.response.data)\r\n            setNotificationStyle('error')\r\n            setNotification(error.response.data.error)\r\n          })\r\n          setNewName('')\r\n          setnewNumber('')\r\n          \r\n        } else {\r\n          if (window.confirm(`${person.name} is already added to phonebook,  replace old number with a new one?`)) {\r\n            const id = persons.filter(p => p.name === person.name)[0].id\r\n            personService.update({id: id, ...person}).then(updatedPerson => {\r\n              setPersons(persons.map(person => person.id !== id ? person : updatedPerson))\r\n              setNotificationStyle('success')\r\n          setNotification(`Updated ${newName}`)\r\n            }).catch(error => {\r\n              setNotificationStyle('error')\r\n              setNotification(`Information of ${newName} has already been removed from the server`)\r\n            })\r\n            setNewName('')\r\n            setnewNumber('')\r\n          }\r\n        }\r\n        setTimeout(() => {\r\n          setNotification(null)\r\n        }, 5000)\r\n      }\r\n\r\n    return (\r\n        <form onSubmit={addPerson}>\r\n      <div>\r\n          name: <input \r\n            value={newName}\r\n            onChange={handleNameChange}/>\r\n        </div>\r\n        <div>\r\n          number: <input \r\n            value={newNumber}\r\n            onChange={handleNumberChange}/>\r\n        </div>\r\n        <div>\r\n          <button type=\"submit\" onSubmit={addPerson}>add</button>\r\n        </div>\r\n      </form>\r\n    )\r\n}\r\n\r\nexport default PersonForm","\r\nconst Filter = ({ newFilter, handleFilterChange }) => {\r\n    return (\r\n        <div>\r\n            filter shown with: <input \r\n            value={newFilter}\r\n            onChange={handleFilterChange}></input>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Filter","import personService from '../services/persons'\r\n\r\nconst Persons = ({ removePerson, filteredPersons }) => {\r\n    return (\r\n    <ul>\r\n    {filteredPersons.map(person => \r\n        <li key={person.name}>\r\n            {person.name} {person.number} <button onClick={() => removePerson(person)}>delete</button>\r\n            </li>\r\n        )}\r\n    </ul>\r\n    )\r\n}\r\n\r\nexport default Persons","const Notification = ({ message, style }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n    \r\n    return (\r\n        <div className={style}>\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\nimport PersonForm from './components/PersonForm'\nimport Filter from './components/Filter'\nimport Persons from './components/Persons'\nimport Notification from './components/Notification'\nimport personService from './services/persons'\n\nconst App = () => {\n  const [notificationMessage, setNotificationMessage] = useState(null)\n  const [notificationStyle, setNotificationStyle] = useState('success')\n  const [persons, setPersons] = useState([]) \n  const [newFilter, setFilter] = useState('')\n  const filteredPersons = (persons.filter(person => \n    person.name.toLowerCase().includes(newFilter.toLowerCase()) \n    || person.number.includes(newFilter) \n  ))\n  const handleFilterChange = (event) => setFilter(event.target.value)\n\n  const removePerson = (person) => {\n    if (window.confirm(`Delete ${person.name}?`)) {\n      personService.remove(person.id)\n      setPersons(persons.filter(p => p.id !== person.id))\n      setNotificationStyle('success')\n      setNotificationMessage(`${person.name} removed`)\n          setTimeout(() => {\n            setNotificationMessage(null)\n          }, 5000)\n    }\n  }\n\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(initialPersons => {\n        setPersons(initialPersons)\n      })\n  }, [])\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n      <Notification message={notificationMessage} style={notificationStyle} />\n      <Filter newFilter={newFilter} handleFilterChange={handleFilterChange} />\n      <h2>add new</h2>\n      <PersonForm \n        persons={persons} \n        setPersons={setPersons} \n        setNotification={setNotificationMessage} \n        setNotificationStyle={setNotificationStyle} />\n      <h2>Numbers</h2>\n      <Persons filteredPersons={filteredPersons} removePerson={removePerson}/>\n    </div>\n  )\n}\n\nexport default App","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css'\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}